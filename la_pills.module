<?php

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\Core\Url;
use Drupal\Core\Link;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Field\FieldDefinitionInterface;

/**
 * Name key.
 * @var string
 */
define('LA_PILLS_NAME_KEY', 'la_pills_name');

/**
 * Implements hook_theme()
 */
function la_pills_theme() {
  return [
    'session_entity' => [
      'render element' => 'elements',
      'file' => 'session_entity.page.inc',
    ],
    'session_template' => [
      'variables' => [
        'template' => NULL,
        'replacements' => [],
        'actions' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_page_attachments()
 */
function la_pills_page_attachments(array &$page) {
  $page['#attached']['library'][] = 'la_pills/main';
}

/**
 * Implements hook_user_login().
 */
function la_pills_user_login($account) {
  $request = \Drupal::request();

  if ($request->cookies->has('Drupal_la_pills_session_entity_redirect_to')) {
    $id = (int) $request->cookies->get('Drupal_la_pills_session_entity_redirect_to');
    $response = new RedirectResponse(Url::fromRoute('entity.session_entity.canonical', ['session_entity' => $id,])->toString());
    $response->headers->clearCookie('Drupal.la_pills.session_entity_redirect_to');
    $response->send();
    return;
  }
}

/**
 * Callback that returns options for all available session template options.
 * @param Drupal\Core\Field\BaseFieldDefinition     $definition
 *   Field sefinition
 * @param Drupal\Core\Entity\ContentEntityInterface $entity
 *   Entity
 * @param bool                                      $cacheable
 *   Cache definition
 * @return array
 *   An array of options
 */
function _la_pills_session_template_allowed_values(BaseFieldDefinition $definition, ContentEntityInterface $entity = NULL, $cacheable) {
  $manager = \Drupal::service('la_pills.session_template_manager');

  $options = [];
  $templates = $manager->getTemplates();

  foreach ($templates as $template) {
    $options[$template->uuid] = '&nbsp;';
    $options[$template->uuid] .= Link::createFromRoute($template->getData()['context']['title'], 'session_template.preview', [
      'session_template' => $template->uuid,
    ], [
      'absolute' => TRUE,
      'attributes' => [
        'target' => '_blank',
      ]
    ])->toString();
    $options[$template->uuid] .= '<p>' . $template->getData()['context']['description']. '</p>';
  }

  return $options;
}

/**
 * Callback that generates a unique numeric code and checks that one does not
 * yet exist within the same column of the entity table.
 *
 * @param  Drupal\Core\Entity\FieldableEntityInterface $entity
 *   Entity being created/updated
 * @param  Drupal\Core\Field\FieldDefinitionInterface $definition
 *   Field definition
 *
 * @return string
 *   Unique code that consists of numbers
 */
function _la_pills_unique_session_numeric_code(FieldableEntityInterface $entity, FieldDefinitionInterface $definition) {
  $manager = \Drupal::service('la_pills.session_entity_code_manager');
  $base_table = $entity->getEntityType()->getBaseTable();
  $field_name = $definition->getName();

  return $manager->generateUniqueCode($base_table, $field_name, 6);
}

/**
 * Implements hook_library_info_alter().
 *
 * Please see this issue for more details https://www.drupal.org/project/bootstrap/issues/3219852#comment-14140239
 */
function la_pills_library_info_alter(&$libraries, $extension)
{
  if (class_exists('\Drupal\bootstrap\Bootstrap')) {
    $theme = \Drupal\bootstrap\Bootstrap::getTheme();

    // Apply modal fixes to bootstrap based themes with modal enabled using jquery_ui_bridge
    if ($theme->isBootstrap() && $theme->getSetting('modal_enabled') && $theme->getSetting('modal_jquery_ui_bridge')) {
      if ($extension == 'core' && !empty($libraries['drupal.dialog'])) {
        // See the link above for the origin of this code
        if (!empty($libraries['drupal.dialog']['js'])) {
          foreach ($libraries['drupal.dialog']['js'] as $key => $asset) {
            if (preg_match('`^assets/vendor/jquery\.ui`', $key)) {
              unset($libraries['drupal.dialog']['js'][$key]);
            }
          }
        }
        if (isset($libraries['drupal.dialog']['css'])) {
          unset($libraries['drupal.dialog']['css']);
        }
      }
    }
  }
}
