<?php

use Drupal\Core\Link;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_theme().
 */
function la_pills_timer_theme() {
  return [
    'la_pills_timers' => [
      'variables' => [
        'student' => NULL,
        'teacher' => NULL,
        'other' => NULL,
        'new_timer' => NULL,
      ],
    ],
    'la_pills_timer_elements' => [
      'variables' => ['elements' => NULL]
    ],
    'la_pills_session_timers' => [
      'variables' => [
        'student' => NULL,
        'teacher' => NULL,
        'other' => NULL,
        'stop_timers' => NULL,
        'download_data' => NULL,
      ],
    ],
    'la_pills_session_timer_elements' => [
      'variables' => ['elements' => NULL]
    ],
  ];
}

/**
 * Implements template_preprocess_la_pills_timer_elements().
 */
function template_preprocess_la_pills_timer_elements(&$variables) {
  if (!empty($variables['elements'])) {
    foreach ($variables['elements'] as $key => $element) {
      if (isset($element['#la_pills_timer_entity'])) {
        $entity = $element['#la_pills_timer_entity'];
        $timer_id = $entity->id();

        $options = [
          'attributes' => [
            'class' => ['use-ajax',],
            'data-dialog-type' => 'modal',
          ],
        ];

        $remove_link_options = $options;
        $remove_link_options['attributes']['class'][] = 'text-danger';

        $parameters = [
          'timer_id' => $timer_id
        ];

        $remove_link = Link::createFromRoute(t('Remove'),'la_pills_timer.la_pills_timer_controller_removeTimer', $parameters, $remove_link_options);
        $edit_link = Link::createFromRoute(t('Edit'),'la_pills_timer.la_pills_timer_controller_editTimer', $parameters, $options);
        $change_status = [
          '#type' => 'checkbox',
          '#attributes' => [
            'title' => t('Mark timer as active'),
            'data-toggle' => 'tooltip',
            'checked' => $entity->getStatus() ? TRUE : FALSE,
            'disabled' => 'disabled',
          ],
        ];

        $timer_color = [
          '#type' => 'html_tag',
          '#tag' => 'span',
          '#value' => '',
          '#attributes' => [
            'class' => [
              'timer-color',
            ],
            'style' => [
              'background-color: ' . $entity->get('color')->value,
            ],
          ],
        ];

        $variables['elements'][$key]['change_status'] = $change_status;
        $variables['elements'][$key]['edit_link'] = $edit_link;
        $variables['elements'][$key]['remove_link'] = $remove_link;
        $variables['elements'][$key]['timer_color'] = $timer_color;
      }
    }
  }
}

/**
 * Implements template_preprocess_la_pills_timer_elements().
 */
function template_preprocess_la_pills_session_timer_elements(&$variables) {
  if (!empty($variables['elements'])) {
    foreach ($variables['elements'] as $key => $element) {
      if (isset($element['#la_pills_session_timer_entity'])) {
        $entity = $element['#la_pills_session_timer_entity'];
        $timer_id = $entity->id();
        $duration = $entity->getCurrentDuration();

        $parameters = [
          'session_entity' => $entity->getSessionId(),
          'timer_id' => $timer_id
        ];

        $session_option = [
          'attributes' => [
            'class' =>[
              'use-ajax',
              'timer-session-button',
              'lapills-timer-time-' . $timer_id
            ],
            'data-duration' => $duration,
          ]
        ];

        if ($entity->hasField('color') && $entity->get('color')->value) {
          $session_option['attributes']['style'] = 'background-color: ' . $entity->get('color')->value . ';';
        }

        if ($entity->getStatus()) {
          $session_option['attributes']['class'][] = 'la-pills-active-timer';
        }

        // XXX Timer is unable to show days, it stps with hours
        // This representation should be similar
        if (gmdate('d', $duration) == '01') {
          $time = gmdate('H:i:s', $duration);
        } else {
          // This one is a bit strange
          $time = intval(gmdate('d', $duration)) - 1 . gmdate(':H:i:s', $duration);
        }

        $session_link = Link::createFromRoute(
          $time,
          'la_pills_timer.la_pills_timer_controller_sessionTimer',
          $parameters,
          $session_option);

        $variables['elements'][$key]['session_link'] = $session_link;
      }
    }
  }
}

function _la_pills_timer_session_entity_form_submitted(&$form, FormStateInterface $form_state) {
  $values = $form_state->getValues();

  if (isset($values['use_timers']) && $values['use_timers']) {
    $entity = $form_state->getFormObject()->getEntity();

    // TODO Consider moving query to a service
    $query_session_timers = \Drupal::entityQuery('la_pills_session_timer_entity')
      ->condition('session_id', $entity->id());

    $session_timers_count = $query_session_timers->count()->execute();

    if ($session_timers_count > 0) {
      return;
    }

    $query_timers = \Drupal::entityQuery('la_pills_timer_entity')
      ->condition('user_id', \Drupal::currentUser()->id())
      ->condition('status', TRUE)
      ->sort('created', 'DESC');

    $timers = \Drupal::entityTypeManager()
        ->getStorage('la_pills_timer_entity')
        ->loadMultiple($query_timers->execute());
    if ($timers) {
      foreach($timers as $timer) {
        $session_timer = \Drupal::entityTypeManager()
          ->getStorage('la_pills_session_timer_entity')
          ->create([
            'session_id' => $entity->id(),
            'name' => $timer->getName(),
            'group' => $timer->getTimerGroup(),
            'color' => $timer->get('color')->value,
          ]);
        $session_timer->save();
      }
      // TODO Consider showing a message about the timers
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function la_pills_timer_form_session_entity_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (in_array($form_id, ['session_entity_add_form', 'session_entity_edit_form',])) {
    // TODO Check if user is allowed to manage add/remove own timers
    $entity = $form_state->getFormObject()->getEntity();
    $entity_has_timers = FALSE;
    if ($entity->id()) {
      // TODO Consider moving query to a service
      $query_session_timers = \Drupal::entityQuery('la_pills_session_timer_entity')
        ->condition('session_id', $entity->id());

      $session_timers_count = $query_session_timers->count()->execute();

      $entity_has_timers = ($session_timers_count > 0) ? TRUE : FALSE;
    }

    // TODO Consider moving both queries to a service
    $query_timers = \Drupal::entityQuery('la_pills_timer_entity')
      ->condition('user_id', \Drupal::currentUser()->id());
    $timers_count = $query_timers->count()->execute();
    $query_active_timers = \Drupal::entityQuery('la_pills_timer_entity')
      ->condition('user_id', \Drupal::currentUser()->id())
      ->condition('status', TRUE);
    $active_timers_count = $query_active_timers->count()->execute();

    $form['la_pills_timer'] = [
      '#type' => 'container',
      '#weight' => 50,
    ];
    $form['la_pills_timer']['explanation'] = [
      '#type' => 'container',
      '#attributes' => [
        'class' => ['alert', 'alert-info',],
      ],
    ];
    $form['la_pills_timer']['explanation']['text'] = [
      '#markup' => t('You have @active active timers out of @total total timers. Please access <a href=":url" target="_blank">timer configuration page</a> to make changes.', [
        '@active' => $active_timers_count,
        '@total' => $timers_count,
        ':url' => Url::fromRoute('la_pills_timer.la_pills_timer_controller_timers')->toString(),
      ]),
    ];
    $form['la_pills_timer']['use_timers'] = [
      '#type' => 'checkbox',
      '#title' => t('Use timers'),
      '#attributes' => [
        'title' => t('Make a copy of your currrently active timers and use those for this session. Please note that this can no longer be changed.'),
        'data-toggle' => 'tooltip',
        'checked' => FALSE,
        'disabled' => $entity_has_timers || $active_timers_count === 0,
      ],
    ];

    // TODO See if we should only attach the handler if checkbox is not disabled
    $form['actions']['submit']['#submit'][] = '_la_pills_timer_session_entity_form_submitted';
  }
}

function la_pills_timer_session_entity_predelete(EntityInterface $entity) {
  // TODO Consider maing the process a lo more resource friendly by either
  // running the delete according to the drupal API logic within a cron job or
  // using direct database queries to delete all the data, bypassing the API
  $query_timers = \Drupal::entityQuery('la_pills_session_timer_entity')
    ->condition('session_id', $entity->id());
  $timers = \Drupal::entityTypeManager()
    ->getStorage('la_pills_session_timer_entity')
    ->loadMultiple($query_timers->execute());

  if ($timers) {
    foreach($timers as $timer) {
      // TODO Deal with possible permission issues, if there are any
      $timer->delete();
    }
  }
}

function la_pills_timer_session_entity_session_close(EntityInterface $entity) {
  // TODO Might need to check if session entity is provided
  // TODO This is a repatition of an existing code, need to only have it in one place
  $query = \Drupal::entityQuery('la_pills_session_timer_entity')
    ->condition('session_id', $entity->id())
    ->condition('status', TRUE)
    ->sort('created', 'DESC');
  $active_timers_ids = $query->execute();

  if ($active_timers_ids) {
    $timers = \Drupal::entityTypeManager()
      ->getStorage('la_pills_session_timer_entity')
      ->loadMultiple($active_timers_ids);

    foreach ($timers as $timer) {
      $timer_id = $timer->id();
      $timer->stopSession();
      $timer->save();
    }
  }
}
